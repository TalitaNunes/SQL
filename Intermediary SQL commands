
# Following explanation and very useful examples of intermediate SQL commands
# A seguir, explicação, e exemplos muito úteis de comandos intermediários de SQL


# ------------------------------------------------------------------------------------------------------------------------------------
# 1
# Commands to specify the number of rows to return from the query, this is useful in large tables with thousands of records,
# even improving query performance, especially when there is no knowledge about the database

# Comandos para especificar o número de linhas de retorno da consulta, isso é útil em tabelas grandes com milhares de registros, 
# melhorando inclusive a performance da consulta, principalmente quando não se tem um conhecimento sobre o banco de dados


# 1.1- TOP (SQL Server)
# 1.1- Example (filtering 10 record lines)

SELECT TOP 10 
column_1, column_2, column_3, ...
FROM table_name


# 1.2- LIMIT (MySQL)
# 1.2- Example (filtering 20 record lines)

SELECT column_1, column_2, column_3, ...
FROM table_name
WHERE column_1 > 10
LIMIT 20


# 1.3- FETCH FIRST
# 1.3- Example (filtering 5 record lines)

SELECT column_1, column_2, column_3, ...
FROM table_name
ORDER BY column_1
FETCH FIRST 5 ROWS ONLY


# 1.4- ROWNUM (SQL Oracle)
# 1.4- Example (filtering <=15 record lines)

SELECT column_1, column_2, column_3, ...
FROM table_name
WHERE ROWNUM <= 15



# ------------------------------------------------------------------------------------------------------------------------------------
# 2
# Commands to apply calculations in the query
# Comandos para aplicar cálculos na consulta

# 2.1- MIN
# 2.1- Example (query in the database, of the employee with the lowest salary)

SELECT MIN(salary), name, age, employee, status
FROM table_employees
WHERE status = 'active'


# 2.2- MAX
# 2.2- Example (query in the database, of the employee with the highest salary)

SELECT MAX(salary), name, age, employee, status
FROM table_employees


# 2.3- COUNT
# 2.3- Example (query in the database, number of orders)

SELECT COUNT(id_order), wine_type, date, store, ...
FROM table_wines


# 2.4- AVG
# 2.4- Example (query in the database, average age of employees)

SELECT AVG(age), name, employee, status, ...
FROM table_employees


# 2.5- SUM
# 2.5- Example (sum, the quantity of wines sold)

SELECT SUM(qty_wine), wine_type, date, store, ...
FROM table_wines


# ------------------------------------------------------------------------------------------------------------------------------------
# 3
# Commands for conditional queries and advanced filters
# Comandos para consultas condicionais e filtros avançados

# 3.1- CASE WHEN
# The CASE statement goes through conditions and returns a value when the first condition is met (like an if-then-else statement). 
# So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause.
# If there is no ELSE part and no conditions are true, it returns NULL.

# A instrução CASE passa por condições e retorna um valor quando a primeira condição é atendida (como uma instrução if-then-else). 
# Assim, uma vez que uma condição for verdadeira, ela parará de ler e retornará o resultado. Se nenhuma condição for verdadeira, ele retornará o valor na cláusula ELSE.
# Se não houver nenhuma parte ELSE e nenhuma condição for verdadeira, ele retornará NULL.

# 3.1- Example 1

SELECT OrderID, Quantity,
CASE
    WHEN Quantity > 30 THEN 'The quantity is greater than 30'
    WHEN Quantity = 30 THEN 'The quantity is 30'
    ELSE 'The quantity is under 30'
END AS QuantityText
FROM OrderDetails


# 3.1- Example 2
# The following SQL will order the customers by City. However, if City is NULL, then order by Country
# O comando SQL a seguir ordenará os clientes por Cidade. No entanto, se Cidade for NULL, então ordenará por País

SELECT CustomerName, City, Country
FROM Customers
ORDER BY
(CASE
    WHEN City IS NULL THEN Country
    ELSE City
END)


# 3.2- LIKE
# The LIKE operator is used in a WHERE clause to search for a specified pattern in a column
# There are two wildcards often used in conjunction with the LIKE operator:
#     The percent sign (%) represents zero, one, or multiple characters
#     The underscore sign (_) represents one, single character


# O operador LIKE é usado em uma cláusula WHERE para pesquisar um padrão especificado em uma coluna
# Existem dois curingas frequentemente usados em conjunto com o operador LIKE:
#     O sinal de porcentagem (%) representa zero, um ou vários caracteres
#     O sinal de sublinhado (_) representa um único caractere

# 3.2- Example 1

SELECT column1, column2, ...
FROM table_name
WHERE column1 LIKE pattern


# 3.2- Example 2
# tip: You can also combine any number of conditions using AND or OR operators
# dica: Você também pode combinar qualquer número de condições usando os operadores AND ou OR

# imagine that in a vet clinic, you need to look up all the cats and dogs in the animal_care table
# imagine que em uma clínica veterinária, você precisa procurar todos os gatos e cachorros na tabela animal_care

SELECT * FROM animal_care
WHERE animal_type LIKE 'Cat' OR animal_type LIKE 'Dog' 


# 3.2- Example 3 (using %)
# The following SQL statement selects all customers with a CustomerName ending with "a"
# A instrução SQL a seguir seleciona todos os clientes com um CustomerName que termina com a letra "a"

SELECT * FROM Customers
WHERE CustomerName LIKE '%a'


# 3.2- Example 4 (using %)
# The following SQL statement selects all customers with a CustomerName that have "or" in any position
# A instrução SQL a seguir seleciona todos os clientes com um CustomerName que tenham "ou" em qualquer posição

SELECT * FROM Customers
WHERE CustomerName LIKE '%or%'


# 3.2- Example 5 (using _)
# The following SQL statement selects all customers with a CustomerName that have "r" in the second position
# A seguinte instrução SQL seleciona todos os clientes com um CustomerName que têm "r" na segunda posição

SELECT * FROM Customers
WHERE CustomerName LIKE '_r%'


# 3.2- Example 6 (using _)
# The following SQL statement selects all customers with a CustomerName that starts with "a" and are at least 3 characters in length
# A instrução SQL a seguir seleciona todos os clientes com um CustomerName que começa com "a" e tem pelo menos 3 caracteres de comprimentox'

SELECT * FROM Customers
WHERE CustomerName LIKE 'a__%'


# 3.2- Example 7 (NOT LIKE)
# the following example queries all drinks on the menu, except those containing sugar
# o seguinte exemplo, consulta todas as bebidas do cardápio, exceto as que contém açucar 

SELECT * FROM table_drinks
WHERE Ingredients NOT LIKE 'Sugar'


# 3.3- IN
# The IN operator allows you to specify multiple values in a WHERE clause
# O operador IN permite especificar vários valores em uma cláusula WHERE


# 3.3- Example 1 (IN)
# The following SQL statement selects all customers that are located in "Germany", "France" or "UK"
# A instrução SQL a seguir seleciona todos os clientes localizados em "Alemanha", "França" ou "Reino Unido"

SELECT * FROM Customers
WHERE Country IN ('Germany', 'France', 'UK')


# 3.3- Example 2 (NOT IN)
# The following SQL statement selects all customers that are NOT located in "Brazil" or "Japan"
# A seguinte instrução SQL seleciona todos os clientes que NÃO estão localizados no "Brazil" ou "Japão"

SELECT * FROM Customers
WHERE Country NOT IN ('Brazil', 'Japan')


# 3.3- Example 3 (IN)
# The following SQL statement selects all customers that are from the same countries as the suppliers
# A seguinte instrução SQL seleciona todos os clientes que são dos mesmos países que os fornecedores

SELECT * FROM Customers
WHERE Country IN (SELECT Country FROM Suppliers)


# 3.4- BETWEEN 

# The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates
# The BETWEEN operator is inclusive: begin and end values are included

# O operador BETWEEN seleciona valores dentro de um determinado intervalo. Os valores podem ser números, texto ou datas
# O operador BETWEEN é inclusivo: os valores inicial e final são incluídos


# 3.4- Example 1 (BETWEEN)

SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20


# 3.4- Example 2 (BETWEEN)
# The following SQL statement selects all products with a price between 10 and 20. In addition, do not show products with a CategoryID of 1,2, or 3
# A instrução SQL a seguir seleciona todos os produtos com preço entre 10 e 20. Além disso, não mostre produtos com um CategoryID de 1,2 ou 3

SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20
AND CategoryID NOT IN (1,2,3)


# 3.4- Example 3 (BETWEEN)
# The following SQL statement selects all products with a ProductName between Cheetos and Pringles
# A seguinte instrução SQL seleciona todos os produtos com um ProductName entre Cheetos e Pringles

SELECT * FROM Products
WHERE ProductName BETWEEN 'Cheetos' AND 'Pringles'
ORDER BY ProductName



# 3.5- HAVING
# The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions
# A cláusula HAVING foi adicionada ao SQL porque a palavra-chave WHERE não pode ser usada com funções agregadas

# 3.5- Example 1
# The following SQL statement lists the number of customers in each country. Only include countries with more than 5 customers
# A instrução SQL a seguir lista o número de clientes em cada país. Incluir apenas países com mais de 5 clientes

SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5



# 3.5- Example 2
# The following SQL statement lists the employees that have registered more than 10 orders
# A seguinte instrução SQL lista os funcionários que registraram mais de 10 pedidos

SELECT LastName, COUNT(OrderID) AS NumberOfOrders
FROM Orders
GROUP BY LastName
HAVING COUNT(OrderID) > 10


# 3.5- Example 3
# The following SQL statement lists if the employees "John Lennon" or "Raul Seixas" have registered more than 25 orders
# A instrução SQL a seguir lista se os funcionários "John Lennon" ou "Raul Seixas" registraram mais de 25 pedidos


SELECT LastName, COUNT(OrderID) AS NumberOfOrders
FROM Orders
WHERE LastName = 'John Lennon' OR LastName = 'Raul Seixas'
GROUP BY LastName
HAVING COUNT(OrderID) > 25


# ------------------------------------------------------------------------------------------------------------------------------------
# 4
# Commands for handling null values
# Comandos para tratamento de valores nulos

# 4.1- ISNULL (SQL Server)


# 4.1- Example 1
# The IS NULL operator is used to test for empty values (NULL values)
# The following SQL lists all customers with a NULL value in the "Address" field

# O operador IS NULL é usado para testar valores vazios (valores NULL).
# O SQL a seguir lista todos os clientes com valor NULL no campo "Endereço"

SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NULL


# 4.1- Example 2
# The IS NOT NULL operator is used to test for non-empty values (NOT NULL values).
# The following SQL lists all customers with a value in the "Address" field

# O operador IS NOT NULL é usado para testar valores não vazios (valores NOT NULL).
# O SQL a seguir lista todos os clientes com um valor no campo "Endereço"

SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NOT NULL


# 4.2- IFNULL (MySQL)
# The MySQL IFNULL() function lets you return an alternative value if an expression is NULL
# A função MySQL IFNULL() permite retornar um valor alternativo se uma expressão for NULL

# 4.2- Example
SELECT ProductName, UnitPrice * (UnitsInStock + IFNULL(UnitsOnOrder, 0))
FROM Products



# 4.3- COALESCE (SQL Oracle)
# The COALESCE function lets you return an alternative value if an expression is NULL
# A função COALESCE permite retornar um valor alternativo se uma expressão for NULL

# 4.3- Example 1

SELECT ProductName, UnitPrice * (UnitsInStock + COALESCE(UnitsOnOrder, 0))
FROM Products

# 4.3- Example 2
# in SQL Oracle the NVL function has the same effect
# no SQL Oracle a função NVL tem o mesmo efeito

SELECT ProductName, UnitPrice * (UnitsInStock + NVL(UnitsOnOrder, 0))
FROM Products


# ------------------------------------------------------------------------------------------------------------------------------------
